%% import the data from the curve (set of 5 experiments)
clear all;

h = findobj(gca,'Type','line');
x = h.XData;
y = h.YData;

%%
row = 1;
baseline = x(row,:)*0;

figure1 = figure;
axes1 = axes('Parent',figure1);
plot(x(row,:), baseline, 'k')
hold on
scatter(x(row,:),y(row,:))
% hold on
% scatter(retraction(row,:)*1000,force_a(row,:))
xlabel('Distance [\mum]')
ylabel('Force [N]')
box(axes1,'on');
set(axes1,'FontSize',15)
%%
row = 1;
thresh = -0.02;
baseline = x(row,:)*0;
thresh_line = baseline + thresh;

figure1 = figure;
axes1 = axes('Parent',figure1);

plot(x(row,:),y(row,:),'.k')
hold on
plot(x(row,:), baseline, 'k')
hold on
plot(x(row,:), thresh_line, 'r')

% hold on
% scatter(retraction(row,:)*1000,force_a(row,:))
xlabel('Distance [\mum]')
ylabel('Force [mN]')
box(axes1,'on');
set(axes1,'FontSize',15)
% xlim([-0.08 -0.05])
ylim([-0.5 0.5])
%%
m = 1;             %number of points before positive force
number_point = 500;
force_cal = y(row,:);
approach_cal = x(row,:);
force = force_cal(force_cal< thresh);
y = force - force(1);
depth = approach_cal(force_cal< thresh); % [mm]
x = depth - depth(1);

figure()
plot(x, y, '.r')
%%
[r,c]=size(y);
a = round(c/5);
x1 = x(1:a); x1=x1-x1(1);
y1 = y(1:a); y1=y1-y1(1); 
figure()
hold on
plot(x1,y1)

hold on
x2 = x(a+:2*a-10);
%x2=x2-x2(1); 
y2 = y(a:2*a-10); 
%y2=y2-y2(1); 
plot(x2,y2)

x3 = x(2*a:3*a-4); 
%x3=x3-x3(1); 
y3 = y(2*a:3*a-4); 
%y3=y3-y3(1); 
plot(x3,y3)

x4 = x(3*a-200:4*a-400);
%x4=x4-x4(1); 
y4 = y(3*a-200:4*a-400);
%y4=y4-y4(1); 
plot(x4,y4)

x5 = x(4*a:5*a); x5=x5-x5(1); 
y5 = y(4*a:5*a); y5=y5-y5(1); 
plot(x5,y5)
%%

NUMBER= [168 188 185 186 161];
N_total= 441;
AF = NUMBER./N_total;  % put right number 
%AF = 0.6;          %It is area fraction    
AT = 0.025*0.025;  %It is the total section m2 
AREA_REAL = AT*AF; 
A1 = AREA_REAL(:,1);
A2 = AREA_REAL(:,2);
A3 = AREA_REAL(:,3);
A4 = AREA_REAL(:,4);
A5 = AREA_REAL(:,5);
%%
Lc = 11e-3; 
S1= -y1; %% force obtained from the experimental curve in N 
S2= -y2;
S3= -y3;
S4= -y4;
S5= -y5;

S11= S1(100:280)./A1;
S22= S2(100:280)./A2;
S33= S3(100:280)./A3;
S44= S4(100:280)./A4;
S55= S5(100:280)./A5;

D1=1/Lc*(x1)*1e-3; % Strain= Gap from the experimental curve(m)/ Lc(Characterstic) length????
%D=D-D(1);
D2=1/Lc*(x2)*1e-3;
D3=1/Lc*(x3)*1e-3;
D4=1/Lc*(x4)*1e-3;
D5=1/Lc*(x5)*1e-3;

D11=D1(100:280);
D22=D2(100:280);
D33=D3(100:280);
D44=D4(100:280);
D55=D5(100:280);
figure()
hold on
title('Force vs strain')
plot(D1,S1./A1)
plot(D2,S2./A2)
plot(D3,S3./A3)
plot(D4,S4./A4)
plot(D5,S5./A5)
% get the value of Eo from linear part and check feed it in the next
% section
Pn1 = polyfit(D11,S11,1);
Pn2 = polyfit(D22,S22,1);
Pn3 = polyfit(D33,S33,1);
Pn4 = polyfit(D44,S44,1);
Pn5 = polyfit(D55,S55,1);

Yfit1 = polyval(Pn1,D11);
Yfit2 = polyval(Pn2,D22);
Yfit3 = polyval(Pn3,D33);
Yfit4 = polyval(Pn4,D44);
Yfit5 = polyval(Pn5,D55);

plot(D11,Yfit1, D22, Yfit2, D33, Yfit3, D44, Yfit4, D55, Yfit5);  
Eo1 = Pn1(1); % this is obtained from initial slop of the curve but is dependent on Lc
Eo2 = Pn2(1); Eo3 = Pn3(1); Eo4 = Pn4(1); Eo5 = Pn5(1);
annotation(gcf,'textbox',[0.2 0.7 0.3 0.18],...
    'String',{['Eo1 = ',num2str(round(Eo1,3)),' Pa'], ['Eo2 = ',num2str(round(Eo2,3)),' Pa'], ['Eo3 = ',num2str(round(Eo3,3)),' Pa'],['Eo4 = ',num2str(round(Eo4,3)),' Pa'], ['Eo5 = ',num2str(round(Eo5,3)),' Pa']});




%%
E1 = (A1)*Eo1;   %% We are examining forces no stress
E2 = (A2)*Eo2;
E3 = (A3)*Eo3;
E4 = (A4)*Eo4;
E5 = (A5)*Eo5;
E = (E1+E2+E3+E4+E5)/5;
%I think, till here there are no fitting parameters, but we should reason those values
%you might change them.   

So = 1.2*E;
%So=0.5;
%So = 0.5e-3*E/Lc;  %It is a fitting parameter %%sigma Weibull
m = 5; %It is a fitting parameter but it is found autoconsistently 
Lm = 3.8e-3;   % the mushroom length
W = Lm/Lc;    %It is a fitting parameter BUT his vaule is related with the mushroom length   
%before 
%Y = E*D.*exp(-(E*D/So).^m)

Y = E*D1.*exp(-(E*D1/So).^m).*(1-exp(-D1/W));  
% This the new idea, inclusing (1-exp(-D/W)). It means the N mushrooms are reacting slowly. 
%  for D>>W  the system behaves like a simple FBM maybe 
%  W in meters should be in the order of magnitude of the mushroom length 

figure()
title('Force vs ExD');
ylabel({'Force/N'})
xlabel({'E \Delta/L_c'})
hold on
plot(E*D1,Y,'k'); 
hold on;
plot(E*D1,S1,E*D2,S2,E*D3,S3,E*D4,S4,E*D5,S5);
annotation(gcf,'textbox',[0.2 0.7 0.3 0.09],...
    'String',{['Lm = ',num2str(round(Lm,4))],['m = ',num2str(round(m,3))], ['\sigma = ',num2str(round(So,3))] });
hold off 


%%
figure()
hold on
S1_11 = S1./(E1*D1.*(1-exp(-D1/W)));
S2_22 = S2./(E2*D2.*(1-exp(-D2/W)));
S3_33 = S3./(E3*D3.*(1-exp(-D3/W)));
S4_44 = S4./(E4*D4.*(1-exp(-D4/W)));
S5_55 = S5./(E5*D5.*(1-exp(-D5/W)));
plot(D1,D1.*S1_11*E1,D2,D2.*S2_22*E2,D3, D3.*S3_33*E3, D4, D4.*S4_44*E4, D5, D5.*S5_55*E5)
title('CorrectedForce vs D');
ylabel({'Force/N'})
xlabel({'strain'})

v1 = 0.25;
val1  = find(D1 > v1);
S1_1 = S1_11(val1);
D11 = D1(val1);
val2  = find(D2 > v1);
S2_2 = S2_22(val2);
D22 = D2(val2);
val3  = find(D3 > v1);
S3_3 = S3_33(val3);
D33 = D3(val3);
val4  = find(D4 > v1);
S4_4 = S4_44(val4);
D44 = D4(val4);
val5  = find(D5 > v1);
D55 = D5(val5);
S5_5 = S5_55(val5);


figure()
hold on
XN1 =  (E1*D11/So);
XN2 =  (E2*D22/So);
XN3 =  (E3*D33/So);
XN4 =  (E4*D44/So);
XN5 =  (E5*D55/So);

YN1 = -log(S1_1); 
YN2 = -log(S2_2); 
YN3 = -log(S3_3); 
YN4 = -log(S4_4); 
YN5 = -log(S5_5); 

 
%val1  = find(E1*D11/So > 0.49);% does not take into account the beginning 
% val2  = find(E2*D22/So > 0.49);
% val3  = find(E3*D33/So > 0.49);
% val4  = find(E4*D44/So > 0.49) ;
% val5  = find(E5*D55/So > 0.49);

% XN11 = XN1(val1); XN22 = XN2(val2); XN33 = XN3(val3); XN44 = XN4(val4); XN55 = XN5(val5);
% YN11 = YN1(val1); YN22 = YN2(val2); YN33 = YN3(val3); YN44 = YN4(val4); YN55 = YN5(val5);
plot(XN1,YN1, XN2,YN2, XN3,YN3,XN4,YN4, XN5,YN5)
title('first Log');
ylabel({'Log(Force)/N'})
xlabel({'ExD/\sigma'})
%val  = find(E*D>0.06);   % does not take into account the beginning 
figure()
plot(log(XN1),log(YN1),log(XN2),log(YN2),log(XN3),log(YN3),log(XN4),log(YN4), log(XN5),log(YN5)); 
hold on;
title('Second Log');
ylabel({'Log(Log(Force))/N'})
xlabel({'Log(ExD/\sigma)'})

[row1,col1] = size(XN1);
[row2,col2] = size(XN2);
[row3,col3] = size(XN3);
[row4,col4] = size(XN4);
[row5,col5] = size(XN5);
col = [col1 col2 col3 col4 col5];
g = min(col);

XN= [XN1(1:g)', XN2(1:g)', XN3(1:g)', XN4(1:g)',XN5(1:g)'];
%uniqueX= intersect(intersect(intersect(intersect((XN1(1:g)),(XN2(1:g))),(XN3(1:g))),XN4(1:g)),XN5(1:g))
uniqueX = unique(XN);

YN11 = interp1(XN1,YN1,uniqueX);
YN22 = interp1(XN2,YN2,uniqueX);
YN33 = interp1(XN3,YN3,uniqueX);
YN44 = interp1(XN4,YN4,uniqueX);
YN55 = interp1(XN5,YN5,uniqueX);
%figure()
%plot(log(uniqueX),log(YN11), log(uniqueX),log(YN22),log(uniqueX),log(YN33),log(uniqueX),log(YN44), log(uniqueX),log(YN55))

%meanY= mean(interpolatedY, 2);
meanY = (YN11+YN22+YN33+YN44+YN55)./5;
dataNoNans_Y = meanY(~isnan(meanY));
dataNoNans_X = uniqueX(~isnan(meanY));
       
Xn_l = log(dataNoNans_X);
Yn_l = log(dataNoNans_Y);
hold on
plot(Xn_l,Yn_l, 'k')
ylabel({'log(log(Force/(E \Delta N(\Delta)/L_c))'})
xlabel({'log(E \Delta/(\sigma_o L_c))'})

Pn = polyfit(Xn_l,Yn_l,1);
Yfit = polyval(Pn,Xn_l);
hold on
plot(Xn_l,Yfit,'k');  
slop = Pn(1);
intercept = Pn(2);
sigma0=exp(-intercept/slop);
annotation(gcf,'textbox',[0.2 0.7 0.3 0.08],...
    'String',{['m = ',num2str(round(slop,2))], ['\sigma_o = ',num2str(round(sigma0,2)), 'N']},...
    'FitBoxToText','off');

  figure(1)
  hold on
  ff= E*D1.*exp(-(E*D1/sigma0).^slop).*(1-exp(-D1/W));  
  plot(E*D1,ff)

% % saving the file 
% %csvwrite('file_name.txt',[Gap(:),F_disp(:),Step_size(:),Attached_pillars(:)], 'sheet1');
% filename_mat = sprintf('%s','WeibullSample361_7_5N_1');
% %filename_mat = sprintf('%s_%d','test',k)
% %filename_mat=['test','.mat']
% save(filename_mat) % save the data from matlab script 

%%
%clear all;
%close all;
%for k=1:2
Lc = 11e-3; 
NUMBER = 177;
N_total= 441;
AF = NUMBER/N_total;  % put right number 
%AF = 0.6;          %It is area fraction    
AT = 0.025*0.025;  %It is the total section m2 
AREA_REAL = AT*AF; 
%Lc = 8.61e-3; 

%It is a characteristic length % in m and needs to be fixed.

S= -y; %% force obtained from the experimental curve in N  
%D =  (1/Lc)* [ 0.1729	0.1979	0.2219	0.2469	0.2716	0.2966	0.3231	0.3469	0.3728	0.3966	0.4218	0.4469	0.4719	0.4969	0.5231	0.5481	0.5719	0.5969	0.6219	0.6469	0.6731	0.6969	0.7219	0.7481	0.7719	0.7981	0.8219	0.8469	0.8731	0.8966	0.9218	0.9469	0.9716	0.9966	1.0209	1.0456	1.0704	1.0958	1.1207	1.1454	1.1704	1.1962	1.2204	1.2454	1.2704	1.2962	1.3212	1.3462	1.371	1.3962	1.4212	1.4462	1.4712	1.4962	1.5212	1.5462	1.5712	1.5962	1.6212	1.6462	1.6712	1.6962	1.7212	1.7462	1.7712	1.7962	1.8212	1.8462	1.871	1.896	1.9211	1.946	1.9707	1.9953	2.0206	2.0448	2.0698	2.0948	2.1198	2.1448	2.1698	2.1945	2.2196	2.2448	2.2695	2.2945	2.3196	2.3444	2.3693	2.3941	2.4196	2.4444	2.4693	2.4941	2.5193	2.5444	2.5693	2.5941	2.6193	2.6444	2.6693	2.6941	2.7191	2.7441	2.7691	2.7941	2.8191	2.8441	2.8691	2.8941	2.9191	2.9441	2.9691	2.9938	3.0187	3.0431	3.0686	3.0926	3.1176	3.1426	3.1676	3.1926	3.2176	3.2426	3.2676	3.2926	3.3176	3.3426	3.3676	3.3926	3.4176	3.4426	3.4676	3.4924	3.5176	3.5424	3.5676	3.5922	3.6172	3.6424	3.6672	3.692	3.7172	3.7423	3.767	3.792	3.817	3.842	3.867	3.892	3.917	3.942	3.967	3.992	4.017	4.042	4.0668	4.0914	4.1165	4.1405	4.1655	4.1908	4.2155	4.2408	4.2655	4.2905	4.3155	4.3405	4.3655	4.3905	4.4158	4.4405	4.4655	4.4905	4.5155	4.5405	4.5655	4.5905	4.6155	4.6405	4.6655	4.6905	4.7155	4.7405	4.7655	4.7905	4.8155	4.8405	4.8655	4.8905	4.9155	4.9405	4.9653	4.9899	5.0152	5.0401	5.0651	5.0899	5.1149	5.1393	5.1649	5.189	5.214	5.2386	5.2636	5.2886	5.3136	5.3386	5.3636	5.3886	5.4136	5.4386	5.4636	5.4886	5.5136	5.5386	5.5636	5.5886	5.6136	5.6386	5.6636	5.6886	5.7136	5.7386	5.7636	5.7886	5.8136	5.8386	5.8636	5.8886	5.9136	5.9386	5.9636	5.9886	6.0135	6.0383	6.0633	6.0883	6.113	6.1382	6.1632	6.1872	6.213	6.2373	6.2628	6.2868	6.3117	6.337	6.362	6.3868	6.4117	6.437	6.462	6.4868	6.5117	6.537	6.562	6.5871	6.612	6.6371	6.662	6.6871	6.7121	6.7371	6.762	6.7871	6.812	6.8371	6.862	6.8871	6.912	6.9371	6.962	6.9868	7.0117	7.037	7.062	7.0868	7.1117	7.137	7.162	7.1868	7.2117	7.2363	7.2617	7.2859	7.3109	7.3359	7.3611	7.386	7.4109	7.4361	7.4611	7.486	7.5109	7.5361	7.5611	7.586	7.6109	7.6361	7.6611	7.686	7.7109	7.7362	7.7611	7.7862	7.8111	7.8362	7.8611	7.8862	7.9109	7.9361	7.9611	7.986	8.0109	8.0361	8.0611	8.086	8.1109	8.1359	8.1609	8.1859	8.2107	8.2356	8.2598	8.2851	8.3107	8.3348	8.359	8.385	8.4091	8.434	8.4592	8.4842	8.5092	8.5342	8.5592	8.5842	8.6092	8.6351	8.6592	8.6842	8.7092	8.7342	8.7592	8.7842	8.8101	8.8342	8.8592	8.8842	8.9092	8.9342	8.959	8.9842	9.0091	9.034	9.0588	9.0838	9.1086	9.134	9.1588	9.1836	9.2086	9.2336	9.2586	9.2836	9.3094	9.3324	9.3586	9.3826	9.4078	9.4323	9.4573	9.4823	9.5074	9.5336	9.5586	9.5836	9.6073	9.6323	9.6573	9.6823	9.7073	9.7323	9.7573	9.7823	9.8073	9.8324	9.8574	9.8824	9.9073	9.9321	9.9574	9.9824	10.0081	10.0318	];	
%S =  [ 0.208891429	0.219947619	0.187644762	0.197298095	0.215200952	0.214095238	0.230699048	0.206813333	0.246817143	0.205729524	0.235790476	0.22071619	0.24914	0.222155238	0.291540952	0.2932	0.271425714	0.25454	0.2694	0.25823619	0.313905714	0.266449524	0.298455238	0.320678095	0.321446667	0.31520381	0.300288571	0.286972381	0.356201905	0.300455238	0.307592381	0.307655238	0.324222857	0.326062857	0.338291429	0.31896381	0.34250381	0.356792381	0.361260952	0.340407619	0.362162857	0.401765714	0.367117143	0.372527619	0.37715619	0.422529524	0.43402381	0.409150476	0.429555238	0.434609524	0.467599048	0.446600952	0.472695238	0.45720381	0.464700952	0.482726667	0.469859048	0.476190476	0.495077143	0.473941905	0.502670476	0.512549524	0.503858095	0.477084762	0.542470476	0.522619048	0.518780952	0.533592381	0.556420952	0.54871619	0.548857143	0.547268571	0.562584762	0.575607619	0.587487619	0.584834286	0.620892381	0.612037143	0.620532381	0.618250476	0.632905714	0.654126667	0.646110476	0.647282857	0.676453333	0.696349524	0.684388571	0.677392381	0.704158095	0.715762857	0.728767619	0.733039048	0.737481905	0.762528571	0.762298095	0.777826667	0.781329524	0.797674286	0.811873333	0.810184762	0.832686667	0.828715238	0.839429524	0.855925714	0.880052381	0.890314286	0.882339048	0.910948571	0.91106381	0.936188571	0.92936381	0.937091429	0.962847619	0.961095238	0.972304762	0.978647619	1.000571429	1.00467619	1.021857143	1.024790476	1.054590476	1.059133333	1.065857143	1.0768	1.086371429	1.114209524	1.115085714	1.119942857	1.137809524	1.150390476	1.158390476	1.167685714	1.194228571	1.182571429	1.207095238	1.228114286	1.223533333	1.2328	1.24812381	1.277161905	1.273390476	1.277114286	1.294371429	1.300466667	1.317142857	1.322504762	1.327428571	1.349114286	1.365895238	1.376761905	1.382380952	1.410742857	1.399657143	1.436866667	1.406533333	1.41487619	1.420914286	1.451895238	1.444171429	1.470428571	1.485057143	1.491571429	1.489961905	1.524057143	1.51952381	1.574980952	1.546780952	1.573914286	1.553114286	1.601628571	1.602666667	1.619304762	1.618095238	1.652390476	1.632142857	1.642295238	1.648285714	1.676580952	1.675580952	1.7034	1.673552381	1.709742857	1.712657143	1.741990476	1.728857143	1.756114286	1.776828571	1.786057143	1.778314286	1.813380952	1.81347619	1.83487619	1.814590476	1.894790476	1.86547619	1.887180952	1.915742857	1.976819048	1.935409524	1.937819048	1.953638095	2.007619048	1.99347619	2.038952381	2.063066667	2.086219048	2.079780952	2.077361905	2.093590476	2.115285714	2.164571429	2.141561905	2.16307619	2.128285714	2.165609524	2.182885714	2.176447619	2.179361905	2.185028571	2.196380952	2.216	2.22332381	2.252104762	2.258666667	2.275342857	2.282438095	2.308247619	2.277	2.275190476	2.304580952	2.3578	2.309952381	2.325247619	2.384047619	2.436942857	2.428895238	2.423609524	2.489342857	2.500952381	2.498152381	2.5022	2.543028571	2.56432381	2.544380952	2.551866667	2.586533333	2.596657143	2.584428571	2.617171429	2.644447619	2.631828571	2.660752381	2.65067619	2.666809524	2.682095238	2.679352381	2.710571429	2.709171429	2.71512381	2.748066667	2.758409524	2.753933333	2.773247619	2.791952381	2.806142857	2.781333333	2.790552381	2.795019048	2.828380952	2.82852381	2.861857143	2.844114286	2.850057143	2.869714286	2.884180952	2.85487619	2.857466667	2.864838095	2.784638095	2.775685714	2.787085714	2.794	2.83012381	2.790619048	2.773961905	2.772619048	2.797542857	2.785742857	2.825952381	2.818380952	2.837514286	2.831085714	2.849533333	2.850819048	2.859352381	2.884780952	2.894704762	2.900638095	2.92127619	2.904047619	2.938790476	2.943047619	2.954057143	2.978466667	2.934152381	2.823171429	2.834390476	2.826685714	2.83192381	2.83827619	2.834085714	2.860942857	2.749190476	2.714714286	2.752942857	2.716190476	2.701066667	2.676095238	2.671504762	2.657390476	2.597180952	2.532266667	2.543228571	2.55932381	2.547666667	2.561304762	2.562342857	2.583761905	2.600666667	2.560085714	2.625295238	2.623371429	2.579047619	2.535152381	2.5698	2.54527619	2.541066667	2.56167619	2.56752381	2.55692381	2.58047619	2.573733333	2.55412381	2.544266667	2.540771429	2.523419048	2.525895238	2.587457143	2.58887619	2.606257143	2.6098	2.609266667	2.555704762	2.588942857	2.588047619	2.585380952	2.600009524	2.594952381	2.611752381	2.616038095	2.61567619	2.551628571	2.57472381	2.589933333	2.613447619	2.605885714	2.598704762	2.609409524	2.609828571	2.634933333	2.626638095	2.638190476	2.640742857	2.625552381	2.61392381	2.617885714	2.618019048	2.631209524	2.662685714	2.659190476	2.669466667	2.629247619	2.634628571	2.665580952	2.672666667	2.594914286	2.550190476	2.260066667	2.177980952	2.020485714	1.876942857	1.766590476	1.157066667	1.179790476	1.17832381	1.176695238	];
%S  = S - S(1); % ????
S1= S(100:200)./AREA_REAL;
D=1/Lc*(x)*1e-3; % Strain= Gap from the experimental curve(m)/ Lc(Characterstic) length????
%D=D-D(1);

D1=D(100:200);
figure(1)
hold on
title('Force vs strain')
plot(D,S./AREA_REAL,'.')
% get the value of Eo from linear part and check feed it in the next
% section
Pn1 = polyfit(D1,S1,1);
Yfit1 = polyval(Pn1,D1);
plot(D1,Yfit1);  
Eo = Pn1(1); % this is obtained from initial slop of the curve but is dependent on Lc
annotation(gcf,'textbox',[0.2 0.7 0.3 0.08],...
    'String',{['Eo = ',num2str(round(Eo,3)),' Pa']});
hold off

%%
E = (AREA_REAL)*Eo;   %% We are examining forces no stress

%I think, till here there are no fitting parameters, but we should reason those values
%you might change them.   

So = 1*E;
%So = 0.5e-3*E/Lc;  %It is a fitting parameter %%sigma Weibull
m = 5; %It is a fitting parameter but it is found autoconsistently 
Lm = 3.5e-3;   % the mushroom length
W = Lm/Lc;    %It is a fitting parameter BUT his vaule is related with the mushroom length   
%before 
%Y = E*D.*exp(-(E*D/So).^m)

Y = E*D.*exp(-(E*D/So).^m).*(1-exp(-D/W));  
% This the new idea, inclusing (1-exp(-D/W)). It means the N mushrooms are reacting slowly. 
%  for D>>W  the system behaves like a simple FBM maybe 
%  W in meters should be in the order of magnitude of the mushroom length 

figure(2)
title('Force vs ExD');
ylabel({'Force/N'})
xlabel({'E \Delta/L_c'})
hold on
plot(E*D,Y); 
hold on;
plot(E*D,S);
annotation(gcf,'textbox',[0.2 0.7 0.3 0.09],...
    'String',{['Lm = ',num2str(round(Lm,4))],['m = ',num2str(round(m,3))], ['\sigma = ',num2str(round(So,3))] });
hold off 


%%
figure(4)
hold on
S2 = S./(E*D.*(1-exp(-D/W)));
%S2 = S./(E*D);

XN1 =  (E*D/So);
YN1 = -log(S2); 
val  = find(E*D>0.3);   % does not take into account the beginning 

XN = XN1(val);
YN = YN1(val);
plot(XN,YN)
%val  = find(E*D>0.06);   % does not take into account the beginning 
figure()
plot(log(XN),log(YN)); 
hold on;
Xn_l = log(XN);
Yn_l = log(YN);

ylabel({'log(log(Force/(E \Delta N(\Delta)/L_c))'})
xlabel({'log(E \Delta/(\sigma_o L_c))'})

Pn = polyfit(Xn_l,Yn_l,1);
Yfit = polyval(Pn,Xn_l);
plot(Xn_l,Yfit);  
slop = Pn(1);
intercept = Pn(2);
sigma0=exp(-intercept/slop);
annotation(gcf,'textbox',[0.2 0.7 0.3 0.08],...
    'String',{['m = ',num2str(round(slop,2))], ['\sigma_o = ',num2str(round(sigma0,2)), 'N']},...
    'FitBoxToText','off');

%  figure(4)
%  hold on
%  title('Force vs strain')
%  plot(D,S)
%  ff= E*D.*exp(-(E*D/sigma0).^slop).*(1-exp(-D/W));  
%  plot(D,ff)

% % saving the file 
% %csvwrite('file_name.txt',[Gap(:),F_disp(:),Step_size(:),Attached_pillars(:)], 'sheet1');
 %filename_mat = sprintf('%s','WeibullSample361_7_5N_1');
% %filename_mat = sprintf('%s_%d','test',k)
% %filename_mat=['test','.mat']
 save(filename_mat) % save the data from matlab script 



%%
% Define the data to be fit
%val  = find(S<max(S));   % does not take into account the beginning 
%S_fit = S(val);
%D_fit = D(val);

h = findobj(gca,'Type','line');
x = (h.XData)*E;
y = h.YData./((1-exp(-D/W)));
figure()
plot(x,y)
val  = find(x>0.02 & x<0.2);
y_fit = y(val);
x_fit = x(val);
figure()
plot(x_fit, y_fit)
% Define function that will be used to fit data
% (F is a vector of fitting parameters)
% Fitting function
f = @(b,t) t.*exp(-(t./b(1)).^(b(2)));  

%Y = E*D.*exp(-(E*D/So).^m).*(1-exp(-D/W));  
%f = @(b,x) b(1)*x.*(1 - exp(-(x)./(b(2))));
% Initial guess at parameters
beta0 = [So,m];
% Fit the model

mdl = fitnlm(x_fit,y_fit,f,beta0);
% Plot the fit against the data
figure
hold on
plot(x,y,'.')
hold on
coefficients = mdl.Coefficients{:, 'Estimate'}
yFitted =1*exp(-(x/ coefficients(1)));
plot(x, yFitted,'-r')



